Current objective:
- MINIMAL server, single channel, anonymous messages

1. Parsing
[x] Store a buffer per client:
	- data.ptr -> class Client {fd, buffer, bufferpos}
	- data.fd -> map<int, Client>
[x] Recv into remaining space in buffer
[x] Parse the messages found
[x] memmove the rest to the front of the buffer

2. Authentification
[x] CAP LS: either return nothing (unsupported) or the corresponding RPL
[x] JOIN: return corresponding RPL, no matter the channel
[x] PASS: return corresponding RPL, no matter the password
[x] NICK: return corresponding RPL, no matter the nickname
[x] USER: return corresponding RPL, no matter the user data 

3. Messaging
- When a message is sent, send (blocking) it to all other users

Then implement:
[x] Map<command, function> (command names to function pointers)
-> void (*func)(Message *message)
[x] NICK+USER: set a bool for each on the user, so that they can send message only once registered
[x] CAP LS: grammar check (?)
[x] JOIN: grammar check (valid channel names)
- PASS: check server password
[x] NICK: grammar check (valid nickname)
[x] NICK: store the nickname and transmit it in messages
- NICK: check that the nickname is unique amongst users

Style:
- Makefile: includes and sources folders
- Server: remove _addrlen
- Server: remove canonical form
- events: EventPool class that wraps around epoll
- Server: should be torn down and put in main...

Errors:
- If TCP connection failed, don't run the server
